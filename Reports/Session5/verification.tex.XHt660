\section{System Verification}
\subsection{Safety}
\subsubsection{Only one gate can be open at a time}
\textit{It is only possible to send an openGate(gateID$_i$) to open gate $i$ after gateState(gateID$_j$, $ b $) delivers $b = false$ and openGate(gateID$_j$) has not been issued in the meantime, for gateID$_i \neq$ gateID$_j$:}
	\begin{itemize}
		\item ~[true*.$\overline{\textrm{gateState(gateID$_j$, false)}}$*.openGate(gateID$_i$)]false
		\item ~[true*.openGate(gateID$_j$).$\overline{\textrm{gateState(gateID$_j$, false)}}$*.openGate(gateID$_i$)]false
	\end{itemize}	
	
\subsubsection{Only one valve can be open at a time}
\textit{It is only possible to send an openValve(valveID$_i$) to open valve $i$ after valveState(valveID$_j$, $ b $) delivers $b = false$ and openValve(valveID$_j$) has not been issued in the meantime, for valveID$_i \neq$ valveID$_j$:}
	\begin{itemize}
		\item ~[true*.$\overline{\textrm{valveState(valveID$_j$, false)}}$*.openValve(valveID$_i$)]false
		\item ~[true*.openValve(valveID$_j$).$\overline{\textrm{valveState(valveID$_j$, false)}}$*.openValve(valveID$_i$)]false
	\end{itemize}
	
\subsubsection{A valve and a gate at different levels can never be open at the same time}
\textit{It is only possible to send an openGate(gateID$_i$) to open gate $i$ after valveState(valveID$_j$, $ b $) delivers $b = false$ and openValve(valveID$_j$) has not been issued in the meantime, for gate $i$ and valve $j$ are on opposite sides of the lift:}
	\begin{itemize}
		\item ~[true*.$\overline{\textrm{valveState(valveID$_j$, false)}}$*.openGate(gateID$_i$)]false
		\item ~[true*.openValve(valveID$_j$).$\overline{\textrm{valveState(valveID$_j$, false)}}$*.openGate(gateID$_i$)]false
	\end{itemize}

\textit{It is only possible to send an openValve(valveID$_i$) to open valve $i$ after gateState(gateID$_j$, $ b $) delivers $b = false$ and openGate(gateID$_j$) has not been issued in the meantime, for valve $i$ and gate $j$ are on opposite sides of the lift:}
	\begin{itemize}
		\item ~[true*.$\overline{\textrm{gateState(gateID$_j$, false)}}$*.openValve(valveID$_i$)]false
		\item ~[true*.openGate(gateID$_j$).$\overline{\textrm{gateState(gateID$_j$, false)}}$*.openValve(valveID$_i$)]false
	\end{itemize}
	
\subsubsection{A gate can only close if there is no ship in between its doors}
\textit{It is only possible to send closeGate(gateID$_i$) to close gate $i$ after gateSensor(gateID$_i$, $b$) delivers $b = false$ and no other action has been issued in the meantime:}
	\begin{itemize}
		\item ~[true*.$\overline{\textrm{gateSensor(gateID$_i$, false)}}$.closeGate(gateID$_i$)]false
	\end{itemize}
	
\subsubsection{A gate can only open if the water level on both sides is equal}
\textit{It is only possible to send openGate(gateID$_i$) to open gate $i$ after \linebreak compareWaterlevel(containerID$_j$, $b$) delivers $b = true$ and no other action has been issued in the meantime, for gate $i$ and container $j$ are on the same side of the lift:}
	\begin{itemize}
		\item ~[true*.$\overline{\textrm{compareWaterlevel(containerID$_j$, true)}}$.openGate(gateID$_i$)]false
	\end{itemize}

\subsubsection{Signal lights can never be off nor indicate hold and pass at the same time}
\textit{passSignal(signalID$_i$, true) has to be followed directly by haltSignal(signalID$_i$, false):}
	\begin{itemize}
		\item ~[true*.passSignal(signalID$_i$, true).$\overline{\textrm{haltSignal(signalID$_i$, false)}}$]false
	\end{itemize}
\textit{haltSignal(signalID$_i$, true) has to be followed directly by passSignal(signalID$_i$, false):}
	\begin{itemize}
		\item ~[true*.haltSignal(signalID$_i$, true).$\overline{\textrm{passSignal(signalID$_i$, false)}}$]false
	\end{itemize}
\textit{passSignal(signalID$_i$, false) can only be issued directly after haltSignal(signalID$_i$, true):}
	\begin{itemize}
		\item ~[true*.$\overline{\textrm{haltSignal(signalID$_i$, true)}}$.passSignal(signalID$_i$, false)]false
	\end{itemize}
\textit{haltSignal(signalID$_i$, false) can only be issued directly after passSignal(signalID$_i$, true):}
	\begin{itemize}
		\item ~[true*.$\overline{\textrm{passSignal(signalID$_i$, true)}}$.haltSignal(signalID$_i$, false)]false
	\end{itemize}

\subsubsection{Signal lights can only indicate pass if the gate is completely opened}
\textit{It is only possible to send passSignal(signalID$_i$, true) to set signal $i$ to pass after a gateState(gateID$_j$, $ b $) delivers $b = true$ and closeGate(gateID$_j$) has not been issued in the meantime, for signal $i$ and gate $j$ are on the same side of the lift:}
	\begin{itemize}
		\item ~[true*.$\overline{\textrm{gateState(gateID$_j$, true)}}$*.passSignal(signalID$_i$, true)]false
		\item ~[true*.closeGate(gateID$_j$).$\overline{\textrm{gateState(gateID$_j$, false)}}$*.openValve(valveID$_i$)]false
	\end{itemize}
	
\subsubsection{An entering signal can only indicate pass if there is no ship in the lift already}
\textit{It is only possible to send passSignal(signalID$_i$, true) to set the entering signal $i$ to pass after shipPresence(posID$_{X.1}$, $b$) delivers $b = false$ and no other action has been issued in the meantime, for posID$_{X.1}$ is the ID of container X.1:}
	\begin{itemize}
		\item ~[true*.$\overline{\textrm{shipPresence(posID$_{X.1}$, false)}}$.passSignal(signalID$_i$, true)]false
	\end{itemize}

%--------------------------------------------------------------------------------------------------------------------------------------------%
%																FUNCTIONALITY
%--------------------------------------------------------------------------------------------------------------------------------------------%
	
\subsubsection*{Functionality}
\subsubsection{If a ship has just left the system and there is no other boat waiting, the system should enter idle state:}
\textit{If shipPresence(posID$_i$, $b$) returns $b = false$ for all position IDs posID$_i$:}
	\begin{itemize}
		\item \textit{For all gate IDs gateID$_i$: If gateState(gateID$_i$, $b$) returns $b = true$, \linebreak closeGate(gateID$_i$) must be issued}
		\begin{itemize}
			\item ~[true*.gateState(gateID$_i$, true).$\overline{\textrm{closeGate(gateID$_i$)}}$]false
		\end{itemize}
		\item \textit{For all signal IDs signalID$_i$: If signalState(signalID$_i$, $b$) returns $b = true$, haltSignal(signalID$_i$, true) must be issued}
		\begin{itemize}
			\item ~[true*.signalState(signalID$_i$, true).$\overline{\textrm{haltSignal(signalID$_i$, true)}}$]false
		\end{itemize}
		\item \textit{Otherwise only shipPresence(posID$_i$, $b$) action must happen}
		\begin{itemize}
			\item ~[true*.$\overline{\textrm{shipPresence(posID$_i$, b)}}$]false
		\end{itemize}
	\end{itemize}
	
\subsubsection{If there is no ship in the lift the first ship to arrive in the system should get served first}
\textit{While the system is idle, it should check for arriving ships periodically using the shipPresence(posID$_i$, $b$) action for all position IDs posID$_i$. If $b = true$ for one position posID$_i \neq X.1$, the system should issue signalPass(signalID$_i$, true) where signalID$_i$ is the entering signal light at the detected ship's position:}
	\begin{itemize}
		% [true*.a]uX.([!b]X && <true>true) -> after an a, b will always happen at some point:
		\item \vspace{1cm}\begin{tabular}{rl}
			~[true*.shipPresence(posID$_i$, true)] & $\mu X$.([$ \overline{\textrm{signalPass(signalID$_i$, true)}} ]X$ \\
			&$\wedge <$true$>$true)
		\end{tabular}
	\end{itemize}
	
\subsubsection{If a ship has just left the system and there are boats waiting on one side of the lift, the first boat in line gets served}
\textit{If shipPresence(posID$_i$, $b$) returns $b = true$ for one position posID$_i \neq X.1$, the system should issue signalPass(signalID$_i$, true) where signalID$_i$ is the entering signal light at position posID$_i$:}
	
\subsubsection{If a ship has just left the system and there are boats waiting on both sides of the lift, then the first boat on the current level gets served}
\textit{If both, shipPresence(posID$_i$, $b$) and shipPresence(posID$_j$, $b$) return $b = true$ for posID$_i \neq$ posID$_j \neq$ posID$_{X.1}$, the system should check the current waterlevel in container X.1 using compareWaterlevel(containerID$_i$, $b_i$) and \linebreak compareWaterlevel(contai-nerID$_j$, $b_j$) (containerID$_i \neq$ containerID$_j \neq$ \linebreak containerID$_{X.1}$) and then issue passSignal(signalID$_k$, true) where signalID$_k$ is the entering signal light at container $k$ and
		\begin{equation*}
		k = 
		\begin{cases}
		i & \text{if } b_i = true\\
		j & \text{if } b_j = true\\
		\end{cases}
		\end{equation*}
}
	
\subsubsection{If a ship hast just entered the lift the system should transport the ship to the other level}
\textit{Once a ship has entered container X.1 (shipPresence(posID$_{X.1}$, $b$) results in $b = true$ for the first time after returning $b = false$), it should check the current waterlevel in container X.1 using compareWaterlevel(containerID$_i$, $b_i$) and \linebreak compareWaterlevel(contai-nerID$_j$, $b_j$) (containerID$_i \neq$ containerID$_j \neq$ \linebreak containerID$_{X.1}$) and then issue passSignal(signalID$_k$, true) where signalID$_k$ is the leaving signal light at container $k$ and
		\begin{equation*}
		k = 
		\begin{cases}
		i & \text{if } b_i = true\\
		j & \text{if } b_j = true\\
		\end{cases}
		\end{equation*}
}