sort
state =  struct idle 			? isIdle			|
				decreaseWaterLevel ? isDecreaseWaterLevel|
				increaseWaterLevel ? isIncreaseWaterLevel|

				boatMovingUp_enterOpen 	? isBoatMovingUp_enterOpen |
				boatMovingUp_enterClose 	? isBoatMovingUp_enterClose |
				boatMovingUp_elevate ? isBoatMovingUp_elevate|
				boatMovingUp_exitOpen ? isBoatMovingUp_exitOpen|
				boatMovingUp_finished? isBoatMovingUp_finished|

				boatMovingDown_enterOpen 	? isBoatMovingDown_enterOpen |
				boatMovingDown_enterClose 	? isBoatMovingDown_enterClose |
				boatMovingDown_elevate ? isBoatMovingDown_elevate|
				boatMovingDown_exitOpen ? isBoatMovingDown_exitOpen|
				boatMovingDown_finished? isBoatMovingDown_finished;


%General components and their states
SLID = 		 struct S00 | S01 | S10 | S11 | S_none;
GateID = 	 struct G0  | G1;
ValveID = 	 struct V0  | V1;
PositionID = struct P00 | P01 | P10 | P11 | P_none;

%Gate to master and master to gate
M2G = struct	setGateOpen0 ? isSetGateOpen0	|
				setGateOpen1	? isSetGateOpen1 	|
				setGateOpenNone ? isSetGateOpenNone;

G2M = struct	gateReady0		? isGateReady0		|
				gateError0		? isGateError0		|
				gateReady1		? isGateReady1		|
				gateNoneReady 	? isGateNoneReady;

M2S = struct	setSignalPass00 ? isSignalSetPass00 |
				setSignalPass01 ? isSignalSetPass01 |
				setSignalPass11 ? isSignalSetPass11 |
				setSignalPass10 ? isSignalSetPass10 |
				setSignalHaltAll ? isSignalSetHaltAll;

S2M = struct	signalReady 	? isSignalReady;

M2V = struct	setWaterLevel0 	? isSetWaterLevel0	|
				setWaterLevel1 	? isSetWaterLevel1;

V2M = struct 	valveReady0 	? isValveReady0 |
				valveReady1 	? isValveReady1;

act
%Gate subcontroller actions
openGate, 	 closeGate: GateID;
openValve, 	 closeValve: ValveID;
gateSensor0, gateSensor1, gateState0, gateState1, valveState0, valveState1:Bool;
haltSignal,  passSignal: SLID;

%goToPos00, goToPos01, goToPos11, gotToPos10;
goToPos00,goToPos01, goToPos10, goToPos11, boatExit, boatExitDown;

g_recFromMaster, m_sendToGate, communicationM_G : M2G;
m_recFromGate, g_sendToMaster, communicationG_M : G2M;

s_recFromMaster, m_sendToSignal, communicationM_S : M2S;
m_recFromSignal, s_sendToMaster, communicationS_M : S2M;

v_recFromMaster, m_sendToValve, communicationM_V : M2V;
m_recFromValve, v_sendToMaster, communicationV_M : V2M;

%--------------------------------------
proc
MasterController(s:state) =
(isIdle(s)			 ->	(goToPos00.m_sendToValve(setWaterLevel0).MasterController(decreaseWaterLevel))+
					(goToPos10.m_sendToValve(setWaterLevel1).MasterController(increaseWaterLevel))) +

%Check if the waterlevel is set to L1 and then open the gate1
(isIncreaseWaterLevel(s) ->  (sum receive:V2M.m_recFromValve(receive).(isValveReady1(receive) == true) ->
			m_sendToGate(setGateOpen1).MasterController(boatMovingDown_enterOpen) <> MasterController(increaseWaterLevel)))+
%Check if the gate1 was opened. Then the boat enters and the doorq closes
(isBoatMovingDown_enterOpen(s) ->  (sum receive:G2M.m_recFromGate(receive).(isGateReady1(receive) == true) ->
			m_sendToSignal(setSignalPass10).goToPos11.m_sendToGate(setGateOpenNone).MasterController(boatMovingDown_enterClose) <> MasterController(boatMovingDown_enterOpen)))+
%Check if the door1 is closed and set the waterlevel to L0.
(isBoatMovingDown_enterClose(s) ->  (sum receive:G2M.m_recFromGate(receive).(isGateNoneReady(receive) == true) ->
			m_sendToSignal(setSignalHaltAll).m_sendToValve(setWaterLevel0).MasterController(boatMovingDown_elevate) <> MasterController(boatMovingDown_enterClose)))+
%Check if the waterlevel is set to L0. Then open the door0.
(isBoatMovingDown_elevate(s) ->  (sum receive:V2M.m_recFromValve(receive).(isValveReady0(receive) == true) ->
			m_sendToGate(setGateOpen0).MasterController(boatMovingDown_exitOpen) <> MasterController(boatMovingDown_elevate)))+
%Check if gate0 is closed and boat exitst and gate closes. Then door0 closes.
(isBoatMovingDown_exitOpen(s) ->  (sum receive:G2M.m_recFromGate(receive).(isGateReady0(receive) == true) ->
			m_sendToSignal(setSignalPass01).boatExitDown.m_sendToGate(setGateOpenNone).MasterController(boatMovingDown_finished) <> MasterController(boatMovingDown_exitOpen)))+
%Check if door0 closed and set the master to the idle state
(isBoatMovingDown_finished(s) -> (sum receive:G2M.m_recFromGate(receive).(isGateNoneReady(receive) == true) ->
			m_sendToSignal(setSignalHaltAll).MasterController(idle) <> MasterController(boatMovingDown_finished)))+

%-----------------------------------------------------------------------------------------------------------------------------------------------------------

%Check if the waterlevel is set to L0 and then open the gate0
(isDecreaseWaterLevel(s) ->  (sum receive:V2M.m_recFromValve(receive).(isValveReady0(receive) == true) ->
			m_sendToGate(setGateOpen0).MasterController(boatMovingUp_enterOpen) <> MasterController(decreaseWaterLevel)))+

%Check if the gate0 was opened. Then the boat enters and the door0 closes
(isBoatMovingUp_enterOpen(s) ->  (sum receive:G2M.m_recFromGate(receive).(isGateReady0(receive) == true) ->
			m_sendToSignal(setSignalPass00).goToPos01.m_sendToGate(setGateOpenNone).MasterController(boatMovingUp_enterClose) <> MasterController(boatMovingUp_enterOpen)))+

%Check if the door0 is closed and set the waterleve to L1.
(isBoatMovingUp_enterClose(s) ->  (sum receive:G2M.m_recFromGate(receive).(isGateNoneReady(receive) == true) ->
			m_sendToSignal(setSignalHaltAll).m_sendToValve(setWaterLevel1).MasterController(boatMovingUp_elevate) <> MasterController(boatMovingUp_enterClose)))+

%Check if the waterlevel is set to L1. Then open the door1.
(isBoatMovingUp_elevate(s) ->  (sum receive:V2M.m_recFromValve(receive).(isValveReady1(receive) == true) ->
			m_sendToGate(setGateOpen1).MasterController(boatMovingUp_exitOpen) <> MasterController(boatMovingUp_elevate)))+
%check if Door1 is opened, boat goes out and door closes.
(isBoatMovingUp_exitOpen(s) ->  (sum receive:G2M.m_recFromGate(receive).(isGateReady1(receive) == true) ->
			m_sendToSignal(setSignalPass11).boatExit.m_sendToGate(setGateOpenNone).MasterController(boatMovingUp_finished) <> MasterController(boatMovingUp_exitOpen)))+
%Check if the door1 is closed and go back to state: idle.
(isBoatMovingUp_finished(s) -> (sum receive:G2M.m_recFromGate(receive).(isGateNoneReady(receive) == true) ->
			m_sendToSignal(setSignalHaltAll).MasterController(idle) <> MasterController(boatMovingUp_finished)));

%-----------------------------------------------------------------------------------------------------------------------------------------------------------

%Gate Contrller
GateController = sum receive:M2G.g_recFromMaster(receive).(
					((isSetGateOpen0(receive) == true) -> GateClose1.openGate(G0) <> GateController) +
					((isSetGateOpen1(receive) == true) -> GateClose0.openGate(G0) <> GateController) +
					((isSetGateOpenNone(receive) == true) -> GateCloseAll <> GateController));

GateClose1 	 =	(sum b:Bool.gateSensor1(b).((b==false) ->  closeGate(G1).g_sendToMaster(gateReady0).GateController <> GateClose1));
GateClose0 	 =	(sum b:Bool.gateSensor0(b).((b==false) ->  closeGate(G0).g_sendToMaster(gateReady1).GateController <> GateClose0));

GateSequence1 = (sum b:Bool.gateSensor0(b).((b==false) ->  closeGate(G0) <> GateSequence1));
GateSequence2 = (sum b:Bool.gateSensor1(b).((b==false) ->  closeGate(G1) <> GateSequence2));
GateCloseAll = GateSequence1.GateSequence2.g_sendToMaster(gateNoneReady).GateController;


%Signal Controller
SignalController = sum receive:M2S.s_recFromMaster(receive).(
						sum receive:M2S.s_recFromMaster(receive).(
							(isSignalSetPass00(receive) == true) -> haltSignal(S00).haltSignal(S01).haltSignal(S10).haltSignal(S11).passSignal(S00).SignalController +
							(isSignalSetPass01(receive) == true) -> haltSignal(S00).haltSignal(S01).haltSignal(S10).haltSignal(S11).passSignal(S01).SignalController +
							(isSignalSetPass11(receive) == true) -> haltSignal(S00).haltSignal(S01).haltSignal(S10).haltSignal(S11).passSignal(S11).SignalController +
							(isSignalSetPass10(receive) == true) -> haltSignal(S00).haltSignal(S01).haltSignal(S10).haltSignal(S11).passSignal(S10).SignalController +
							(isSignalSetHaltAll(receive) == true) -> haltSignal(S00).haltSignal(S01).haltSignal(S10).haltSignal(S11).SignalController+
							SignalController)
							);

%ValveController
ValveController = sum receive:M2V.v_recFromMaster(receive).(
				%check if message from master is received %close valve v1 in case we want to open v1  %check water level end send if everithink ok a valve ready message, otherwise error message
					((isSetWaterLevel0(receive)==true) -> closeValve(V0).(sum b:Bool.valveState0(b).((b==false) -> openValve(V1))).v_sendToMaster(valveReady0)) +
					((isSetWaterLevel1(receive)==true) -> closeValve(V1).(sum b:Bool.valveState1(b).((b==false) -> openValve(V0))).v_sendToMaster(valveReady1))
				).ValveController;


%  ((prump==L0) -> closeValve(V1).openValve(V0).((true) -> (v_sendToMaster(valveReady).ValveController) <> (v_sendToMaster(valveError).ValveController)))+
%  ((prump==L1) -> closeValve(V0).openValve(V1).((true) -> (v_sendToMaster(valveReady).ValveController) <> (v_sendToMaster(valveError).ValveController)))))
%  <>ValveController);

init


	allow(
		{openValve, 	 closeValve,
		openGate, 		  closeGate,
		valveState0, 	  valveState1,
		goToPos00, 		  goToPos01,
		goToPos10, 	goToPos11,
		boatExit, boatExitDown,
		gateSensor0,	  gateSensor1,
		gateState0,  gateState1,
	  haltSignal,  passSignal,
		communicationG_M, communicationM_G, communicationM_S, communicationS_M,communicationM_V,  communicationV_M},
%set parallel actions
		comm(
			{m_recFromGate 	| g_sendToMaster 	-> communicationG_M,
			g_recFromMaster | m_sendToGate 		-> communicationM_G,
			s_recFromMaster | m_sendToSignal 	-> communicationM_S,
			m_recFromSignal | s_sendToMaster 	-> communicationS_M,
			m_recFromValve 	| v_sendToMaster 	-> communicationV_M,
			v_recFromMaster | m_sendToValve 	-> communicationM_V},
			MasterController(idle) || GateController || SignalController || ValveController

	)
);
