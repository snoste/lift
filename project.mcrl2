sort
state =  struct idle 			? isIdle			|
				decreaseWaterLevel ? isDecreaseWaterLevel|
				increaseWaterLevel ? isIncreaseWaterLevel|

				boatMovingUp_enterOpen 	? isBoatMovingUp_enterOpen |
				boatMovingUp_enterClose 	? isBoatMovingUp_enterClose |
				boatMovingUp_elevate ? isBoatMovingUp_elevate|
				boatMovingUp_exitOpen ? isBoatMovingUp_exitOpen|
				boatMovingUp_finished? isBoatMovingUp_finished|
				stateMoveToP01 ? isStateMoveToP01|
				boatMovingUp_exit ? isBoatMovingUp_exit|
				boatEndUp ? isBoatEndUp|

				boatMovingDown_enterOpen 	? isBoatMovingDown_enterOpen |
				boatMovingDown_enterClose 	? isBoatMovingDown_enterClose |
				boatMovingDown_elevate ? isBoatMovingDown_elevate|
				boatMovingDown_exitOpen ? isBoatMovingDown_exitOpen|
				boatMovingDown_finished? isBoatMovingDown_finished|
				boatMovingDown_exit ? isBoatMovingDown_exit|
				stateMoveToP11 ? isStateMoveToP11|
				boatEndDown ? isBoatEndDown|

				signalDoneDown ? isSignalDoneDown|
				signalDoneUp ? isSignalDoneUp|

				waitForS00_Up ? isWaitForS00_Up|
				waitForS01_Down ? isWaitForS01_Down|
				waitForS10_Down ? isWaitForS10_Down|
				waitForS11_Up ? isWaitForS11_Up|

				waitForHaltAll_EnterDown ? isWaitForHaltAll_EnterDown|
				waitForHaltAll_ExitDown ? isWaitForHaltAll_ExitDown|
				waitForHaltAll_EnterUp ? isWaitForHaltAll_EnterUp|
				waitForHaltAll_ExitUp ? isWaitForHaltAll_ExitUp;

%General components and their states
SLID = 		 struct S00 | S01 | S10 | S11 | S_none;
GateID = 	 struct G0  | G1;
ValveID = 	 struct V0  | V1;
PositionID = struct P00 ? isP00 | P10 ? isP10 | Pnone ? isPnone;

%Gate to master and master to gate
M2G = struct	setGateOpen0 ? isSetGateOpen0	|
				setGateOpen1	? isSetGateOpen1 	|
				setGateOpenNone ? isSetGateOpenNone;

G2M = struct	gateReady0		? isGateReady0		|
				gateError0		? isGateError0		|
				gateReady1		? isGateReady1		|
				gateNoneReady 	? isGateNoneReady;

M2S = struct	setSignalPass00 ? isSignalSetPass00 |
				setSignalPass01 ? isSignalSetPass01 |
				setSignalPass11 ? isSignalSetPass11 |
				setSignalPass10 ? isSignalSetPass10 |
				setSignalHaltAll ? isSignalSetHaltAll;

S2M = struct	haltReady 	? isHaltReady|
							signalReadyS00 ? isSignalReadyS00|
							signalReadyS01 ? isSignalReadyS01|
							signalReadyS10 ? isSignalReadyS10|
							signalReadyS11 ? isSignalReadyS11|
							signalReadyHaltAll ? isSignalReadyHaltAll;

M2V = struct	setWaterLevel0 	? isSetWaterLevel0	|
				setWaterLevel1 	? isSetWaterLevel1;

V2M = struct 	valveReady0 	? isValveReady0 |
				valveReady1 	? isValveReady1;

act
%Gate subcontroller actions
openGate, 	 closeGate: GateID;
openValve, 	 closeValve: ValveID;
gateSensor0, gateSensor1, gateState0, gateState1, valveState0, valveState1, compareWaterLevel1, compareWaterLevel0:Bool;
haltSignal,  passSignal: SLID;
sensePosition: PositionID;

%goToPos00, goToPos01, goToPos11, gotToPos10;
goToPos00,goToPos01, goToPos10, goToPos11, boatExit,boatExitUp, boatExitDown;

g_recFromMaster, m_sendToGate, communicationM_G : M2G;
m_recFromGate, g_sendToMaster, communicationG_M : G2M;

s_recFromMaster, m_sendToSignal, communicationM_S : M2S;
m_recFromSignal, s_sendToMaster, communicationS_M : S2M;

v_recFromMaster, m_sendToValve, communicationM_V : M2V;
m_recFromValve, v_sendToMaster, communicationV_M : V2M;

%--------------------------------------
proc
MasterController(s:state) =
(isIdle(s)	 ->	  (sum receive:PositionID.sensePosition(receive).
						(isP00(receive) == true) ->m_sendToValve(setWaterLevel0).MasterController(decreaseWaterLevel)<>(
						(isP10(receive)==true)	 ->m_sendToValve(setWaterLevel1).MasterController(increaseWaterLevel)<>MasterController(idle))))+
%Check if the waterlevel is set to L1 and then open the gate1
(isIncreaseWaterLevel(s) ->  (sum receive:V2M.m_recFromValve(receive).(isValveReady1(receive) == true) ->
			m_sendToGate(setGateOpen1).MasterController(boatMovingDown_enterOpen) <> MasterController(increaseWaterLevel)))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if the gate1 was opened. Then the boat enters and the doorq closes
(isBoatMovingDown_enterOpen(s)  ->  (sum receive:G2M.m_recFromGate(receive).(isGateReady1(receive) == true) ->
			m_sendToSignal(setSignalPass10).MasterController(waitForS10_Down) <> MasterController(boatMovingDown_enterOpen)))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if there is a response from S10 and then close the gate
(isWaitForS10_Down (s)  ->  (sum receive:S2M.m_recFromSignal(receive).(isSignalReadyS10(receive) == true) ->
			goToPos11.MasterController(stateMoveToP11) <> MasterController(waitForS10_Down)))+
%---------------------------------------------------------------------------------------------------------------------------------
(isStateMoveToP11(s) -> m_sendToGate(setGateOpenNone).MasterController(boatMovingDown_enterClose))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if the door1 is closed and set the waterlevel to L0.
(isBoatMovingDown_enterClose(s)  ->  (sum receive:G2M.m_recFromGate(receive).(isGateNoneReady(receive) == true) ->
			m_sendToSignal(setSignalHaltAll).MasterController(waitForHaltAll_EnterDown) <> MasterController(boatMovingDown_enterClose)))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if the all signal went to halt and then
(isWaitForHaltAll_EnterDown(s)  ->  (sum receive:S2M.m_recFromSignal(receive).(isSignalReadyHaltAll(receive) == true) ->
			m_sendToValve(setWaterLevel0).MasterController(boatMovingDown_elevate) <> MasterController(waitForHaltAll_EnterDown)))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if the waterlevel is set to L0. Then open the door0.
(isBoatMovingDown_elevate(s)  ->  (sum receive:V2M.m_recFromValve(receive).(isValveReady0(receive) == true) ->
			m_sendToGate(setGateOpen0).MasterController(boatMovingDown_exitOpen) <> MasterController(boatMovingDown_elevate)))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if gate0 is closed and boat exitst and gate closes. Then door0 closes.
(isBoatMovingDown_exitOpen(s)  ->  (sum receive:G2M.m_recFromGate(receive).(isGateReady0(receive) == true) ->
			m_sendToSignal(setSignalPass01).MasterController(boatMovingDown_finished) <> MasterController(boatMovingDown_exitOpen)))+
%---------------------------------------------------------------------------------------------------------------------------------
(isBoatMovingDown_finished(s)  ->  (sum receive:S2M.m_recFromSignal(receive).(isSignalReadyS01(receive) == true) ->
			boatExitDown.MasterController(boatMovingDown_exit) <> MasterController(boatMovingDown_finished)))+
%---------------------------------------------------------------------------------------------------------------------------------
(isBoatMovingDown_exit(s) -> m_sendToSignal(setSignalHaltAll).MasterController(boatEndDown))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if door0 closed and set the master to the idle state
(isBoatEndDown(s)  -> (sum receive:S2M.m_recFromSignal(receive).(isSignalReadyHaltAll(receive) == true) ->
			m_sendToGate(setGateOpenNone).MasterController(signalDoneDown) <> MasterController(boatEndDown)))+
%---------------------------------------------------------------------------------------------------------------------------------
(isSignalDoneDown(s)  -> (sum receive:G2M.m_recFromGate(receive).(isGateNoneReady(receive) == true) ->
			MasterController(idle) <> MasterController(signalDoneDown)))+
%---------------------------------------------------------------------------------------------------------------------------------
%
%NEXT OPTION START HERE
%---------------------------------------------------------------------------------------------------------------------------------
%
%Check if the waterlevel is set to L1 and then open the gate1
(isDecreaseWaterLevel(s) ->  (sum receive:V2M.m_recFromValve(receive).(isValveReady0(receive) == true) ->
			m_sendToGate(setGateOpen0).MasterController(boatMovingUp_enterOpen) <> MasterController(decreaseWaterLevel)))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if the gate1 was opened. Then the boat enters and the doorq closes
(isBoatMovingUp_enterOpen(s)  ->  (sum receive:G2M.m_recFromGate(receive).(isGateReady0(receive) == true) ->
			m_sendToSignal(setSignalPass00).MasterController(waitForS00_Up) <> MasterController(boatMovingUp_enterOpen)))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if there is a response from S10 and then close the gate
(isWaitForS00_Up (s)  ->  (sum receive:S2M.m_recFromSignal(receive).(isSignalReadyS00(receive) == true) ->
			goToPos01.MasterController(stateMoveToP01) <> MasterController(waitForS00_Up)))+
%---------------------------------------------------------------------------------------------------------------------------------
(isStateMoveToP01(s) -> m_sendToGate(setGateOpenNone).MasterController(boatMovingUp_enterClose))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if the door1 is closed and set the waterlevel to L0.
(isBoatMovingUp_enterClose(s)  ->  (sum receive:G2M.m_recFromGate(receive).(isGateNoneReady(receive) == true) ->
			m_sendToSignal(setSignalHaltAll).MasterController(waitForHaltAll_EnterUp) <> MasterController(boatMovingUp_enterClose)))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if the all signal went to halt and then
(isWaitForHaltAll_EnterUp(s)  ->  (sum receive:S2M.m_recFromSignal(receive).(isSignalReadyHaltAll(receive) == true) ->
			boatExitUp.m_sendToValve(setWaterLevel1).MasterController(boatMovingUp_elevate) <> MasterController(waitForHaltAll_EnterUp)))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if the waterlevel is set to L0. Then open the door0.
(isBoatMovingUp_elevate(s)  ->  (sum receive:V2M.m_recFromValve(receive).(isValveReady1(receive) == true) ->
			m_sendToGate(setGateOpen1).MasterController(boatMovingUp_exitOpen) <> MasterController(boatMovingUp_elevate)))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if gate0 is closed and boat exitst and gate closes. Then door0 closes.
(isBoatMovingUp_exitOpen(s)  ->  (sum receive:G2M.m_recFromGate(receive).(isGateReady1(receive) == true) ->
			m_sendToSignal(setSignalPass11).MasterController(boatMovingUp_finished) <> MasterController(boatMovingUp_exitOpen)))+
%---------------------------------------------------------------------------------------------------------------------------------
(isBoatMovingUp_finished(s)  ->  (sum receive:S2M.m_recFromSignal(receive).(isSignalReadyS11(receive) == true) ->
			boatExitUp.MasterController(boatMovingUp_exit) <> MasterController(boatMovingUp_finished)))+
%---------------------------------------------------------------------------------------------------------------------------------
(isBoatMovingUp_exit(s) -> m_sendToSignal(setSignalHaltAll).MasterController(boatEndUp))+
%---------------------------------------------------------------------------------------------------------------------------------
%Check if door0 closed and set the master to the idle state
(isBoatEndUp(s)  -> (sum receive:S2M.m_recFromSignal(receive).(isSignalReadyHaltAll(receive) == true) ->
			m_sendToGate(setGateOpenNone).MasterController(signalDoneUp) <> MasterController(boatEndUp)))+
%---------------------------------------------------------------------------------------------------------------------------------
(isSignalDoneUp(s)  -> (sum receive:G2M.m_recFromGate(receive).(isGateNoneReady(receive) == true) ->
			MasterController(idle) <> MasterController(signalDoneUp)));


%-----------------------------------------------------------------------------------------------------------------------------------------------------------
%Gate Contrller
GateController = sum receive:M2G.g_recFromMaster(receive).(
					((isSetGateOpen0(receive) == true) 		-> GateClose1 	 <>
					((isSetGateOpen1(receive) == true) 		-> GateClose0 	 <>
					((isSetGateOpenNone(receive) == true) -> GateSequence1 <> GateController))));

GateClose1 	 =	(sum b:Bool.gateSensor1(b).((b==false) ->  closeGate(G1).GateClose1_1 <> GateClose1));
GateClose1_1 =  (sum b:Bool.gateSensor1(b).((b==false) ->  openGate(G0).GateClose1_2 <> GateClose1_1));
GateClose1_2 =  g_sendToMaster(gateReady0).GateController;

GateClose0 	 =	(sum b:Bool.gateSensor0(b).((b==false) ->  closeGate(G0).GateClose0_1 <> GateClose0));
GateClose0_1 =  (sum b:Bool.gateSensor0(b).((b==false) ->  openGate(G0).GateClose0_2 <> GateClose0_1));
GateClose0_2 =  g_sendToMaster(gateReady1).GateController;

GateSequence1 = (sum b:Bool.gateSensor0(b).((b==false) ->  closeGate(G0).GateSequence2 <> GateSequence1));
GateSequence2 = (sum b:Bool.gateSensor1(b).((b==false) ->  closeGate(G1).GateSequence3 <> GateSequence2));
GateSequence3 = g_sendToMaster(gateNoneReady).GateController;

%---------------------------------------------------------------------------------------------------------------------------------
%Signal Controller
SignalController = (sum receive:M2S.s_recFromMaster(receive).(
		(isSignalSetPass00(receive) == true) ->(haltSignal(S00).haltSignal(S01).haltSignal(S10).haltSignal(S11).passSignal(S00).s_sendToMaster(signalReadyS00).SignalController) <> SignalController+
		(isSignalSetPass01(receive) == true) -> (haltSignal(S00).haltSignal(S01).haltSignal(S10).haltSignal(S11).passSignal(S01).s_sendToMaster(signalReadyS01).SignalController) <> SignalController+
		(isSignalSetPass11(receive) == true) -> (haltSignal(S00).haltSignal(S01).haltSignal(S10).haltSignal(S11).passSignal(S11).s_sendToMaster(signalReadyS11).SignalController) <> SignalController+
		(isSignalSetPass10(receive) == true) -> (haltSignal(S00).haltSignal(S01).haltSignal(S10).haltSignal(S11).passSignal(S10).s_sendToMaster(signalReadyS10).SignalController) <> SignalController+
		(isSignalSetHaltAll(receive) == true) -> (haltSignal(S00).haltSignal(S01).haltSignal(S10).haltSignal(S11).s_sendToMaster(signalReadyHaltAll).SignalController) <> SignalController));
%---------------------------------------------------------------------------------------------------------------------------------
%ValveController
ValveController = sum receive:M2V.v_recFromMaster(receive).(
				%check if message from master is received %close valve v1 in case we want to open v1  %check water level end send if everithink ok a valve ready message, otherwise error message
					((isSetWaterLevel1(receive)==true) -> closeValve(V0).(sum b:Bool.valveState1(b).((b==false) -> openValve(V1).compare1.ValveController <> compare1.ValveController) )) +
					((isSetWaterLevel0(receive)==true) -> closeValve(V1).(sum b:Bool.valveState0(b).((b==false) -> openValve(V0).compare0.ValveController <> compare0.ValveController) )));

compare1 =	(sum b:Bool.compareWaterLevel1(b).((b==true) ->  v_sendToMaster(valveReady1).ValveController <> compare1));
compare0 =	(sum b:Bool.compareWaterLevel0(b).((b==true) ->  v_sendToMaster(valveReady0).ValveController <> compare0));

%  ((prump==L0) -> closeValve(V1).openValve(V0).((true) -> (v_sendToMaster(valveReady).ValveController) <> (v_sendToMaster(valveError).ValveController)))+
%  ((prump==L1) -> closeValve(V0).openValve(V1).((true) -> (v_sendToMaster(valveReady).ValveController) <> (v_sendToMaster(valveError).ValveController)))))
%  <>ValveController);

init
%hide({goToPos00}, remember to add bracket at the end of init!
	allow(
		{openValve, 	 closeValve,
		openGate, 		  closeGate,
		valveState0, 	  valveState1,
		goToPos00,
		goToPos01,
		goToPos10, 	goToPos11,
		boatExit, boatExitDown,
		gateSensor0,	  gateSensor1,
		gateState0,  gateState1,
	  haltSignal,  passSignal,
		sensePosition,boatExitUp,
		compareWaterLevel1,compareWaterLevel0,
		communicationG_M, communicationM_G, communicationM_S, communicationS_M,communicationM_V,  communicationV_M},
%set parallel actions
		comm(
			{m_recFromGate 	| g_sendToMaster 	-> communicationG_M,
			g_recFromMaster | m_sendToGate 		-> communicationM_G,
			s_recFromMaster | m_sendToSignal 	-> communicationM_S,
			m_recFromSignal | s_sendToMaster 	-> communicationS_M,
			m_recFromValve 	| v_sendToMaster 	-> communicationV_M,
			v_recFromMaster | m_sendToValve 	-> communicationM_V},
			MasterController(idle) || GateController || SignalController || ValveController));
